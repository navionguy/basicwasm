package keybuffer

var buffer []byte
var read int
var write int
var ringsize int

func init() {
	read = 0
	write = 0
	ringsize = 300
	buffer = make([]byte, ringsize)
}

// SaveKeyStroke saves all the bytes generated by a keystroke
func SaveKeyStroke(key []byte) {
	tw := write
	for _, bt := range key {
		buffer[tw] = bt
		tw++
		if tw == ringsize {
			// wrap back to the beginning
			tw = 0
		}
		if tw == read {
			//I've filled the buffer!
			return
		}
	}
	write = tw
}

// ReadByte returns the next byte, caller has to decide if he needs more
func ReadByte() (byte, bool) {
	if read == write {
		return ' ', false
	}
	bt := buffer[read]
	read++
	if read == ringsize {
		read = 0
	}
	return bt, true
}
